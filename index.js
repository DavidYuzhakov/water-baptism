import TelegramBot from 'node-telegram-bot-api'
import { google } from 'googleapis'
import { configDotenv } from 'dotenv'
import express from 'express'

configDotenv()

const app = express()
const PORT = process.env.PORT || 3000

app.get('/', (_, res) => res.send('Bot is running'))
app.listen(PORT, () => {
  console.log(`Server running on ${PORT}`)
})

const token = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(token, { polling: true })

const userStates = {}

const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
})

const sheets = google.sheets({ version: 'v4', auth })

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id
  userStates[chatId] = { step: 'name' }

  bot.sendPhoto(chatId, './img/intro.jpeg', {
    caption: `–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, ${msg.from?.first_name}üëã. –ü–µ—Ä–≤–æ–µ –≤–æ–¥–Ω–æ–µ –∫—Ä–µ—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è üê≥ 2 –∞–≤–≥—É—Å—Ç–∞! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ üôÇ
    
–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é, –ò–º—è:`,
  })
})

bot.on('message', async (msg) => {
  const chatId = msg.chat.id
  if (!userStates[chatId]) return

  const state = userStates[chatId]
  if (state.step === 'name') {
    state.name = msg.text
    state.step = 'dateOfBirth'

    bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000)')
  } else if (state.step === 'dateOfBirth') {
    state.dateOfBirth = msg.text
    state.step = 'homeGroup'

    bot.sendMessage(chatId, '–í –∫–∞–∫—É—é –¥–æ–º–∞—à–Ω—é—é –≥—Ä—É–ø–ø—É –≤—ã —Ö–æ–¥–∏—Ç–µ?', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–Ω–∞ –ë–µ–≥–æ–≤–æ–π', callback_data: '–ë–µ–≥–æ–≤–∞—è' },

            { text: '–ù–µ –ø–æ—Å–µ—â–∞—é', callback_data: '-' },
          ],
          [
            {
              text: '–Ω–∞ –ë. –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–π',
              callback_data: '–ë–æ–ª—å—à–∞—è –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è',
            },
          ],
        ],
      },
    })
  }
})

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id
  if (query.data === '/start') {
    userStates[chatId] = { step: 'name' }
    bot.sendMessage(chatId, '–ù–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –ò–º—è.')
  }

  const state = userStates[chatId]
  if (!state) return

  if (state.step === 'homeGroup') {
    state.homeGroup = query.data
    state.step = 'first_visit'

    bot.sendMessage(
      chatId,
      '–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ—Å–µ—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ 20 —á–∏—Å–ª–∞ (–ø–æ—Å–ª–µ –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏—è)?',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–∞', callback_data: '20' },
              { text: '–ù–µ—Ç', callback_data: '-' },
            ],
          ],
        },
      }
    )
  } else if (state.step === 'first_visit') {
    state.visit = [query.data.toString()]
    state.step = 'second_visit'
    bot.sendMessage(
      chatId,
      '–°–º–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø–æ—Å–µ—Ç–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ 27 —á–∏—Å–ª–∞ (–ø–æ—Å–ª–µ –≤–æ—Å–∫—Ä–µ—Å–Ω–æ–≥–æ –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏—è)?',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–∞', callback_data: '27' },
              { text: '–ù–µ—Ç', callback_data: '-' },
            ],
          ],
        },
      }
    )
  } else if (state.step === 'second_visit') {
    state.visit = [...state.visit, query.data.toString()]
    state.step = 'question'

    try {
      await sheets.spreadsheets.values.append({
        spreadsheetId: process.env.GOOGLE_TABLE_ID,
        range: 'A1',
        valueInputOption: 'USER_ENTERED',
        resource: {
          values: [
            [
              state.name,
              state.dateOfBirth,
              state.homeGroup,
              state.visit.join(', '),
            ],
          ],
        },
      })
      bot.sendMessage(
        chatId,
        `
          –°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤–æ–¥–Ω–æ–µ –∫—Ä–µ—â–µ–Ω–∏–µ –≤ —Ü–µ—Ä–∫–≤–∏ "–ë–ª–∞–≥–æ–¥–∞—Ç—å" (–ú–æ—Å–∫–≤–∞, –°–µ–≤–µ—Ä) 2 –∞–≤–≥—É—Å—Ç–∞ üéâ

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Maxim_Demin_S.
        `
      )
    } catch (err) {
      console.log(err)
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. ', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: '/start' }],
          ],
        },
      })
    }
    delete userStates[chatId]
  } else if (state.step === 'question') {
  }

  bot.answerCallbackQuery(query.id)
})
